# -*- coding: utf-8 -*-
"""RandomSearchCV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ovVBErrx-129IGNESNPiTDaFgqyam8Cd
"""

#Hyperparameter Optimization with RandomSearchCV

!pip install catboost
import warnings
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import GridSearchCV, cross_validate, RandomizedSearchCV, validation_curve
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from catboost import CatBoostClassifier
from sklearn.metrics import accuracy_score

pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)
warnings.simplefilter(action='ignore', category=Warning)

df = pd.read_csv("/content/drive/MyDrive/Datasets/diabetes.csv")

y = df["Outcome"]
X = df.drop(["Outcome"], axis=1)

rf_model = RandomForestClassifier(random_state=17)
rf_random_params = {"max_depth":np.random.randint(5, 50, 10),
                    "max_features": [3, 5, 7, "sqrt", "auto"],
                    "min_samples_split": np.random.randint(2, 50, 20),
                    "n_estimators":[int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]}

rf_random = RandomizedSearchCV(estimator=rf_model,
                               param_distributions=rf_random_params,
                               n_iter=100,
                               cv=3,
                               verbose=True,
                               random_state=17,
                               n_jobs=-1)

rf_random.fit(X, y)

rf_random.best_params_

rf_random_final = rf_model.set_params(**rf_random.best_params_, random_state=17).fit(X, y)

cv_result = cross_validate(rf_random_final, X, y, cv=5, scoring=["accuracy", "f1", "roc_auc"])
print(cv_result['test_accuracy'].mean())
print(cv_result['test_f1'].mean())
print(cv_result['test_roc_auc'].mean())